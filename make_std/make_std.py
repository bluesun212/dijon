# This file generates std.dij and optionally copies it to ../../dijon/

from unicodedata import name
import sys

# File sections between auto-generated portion
sec_begin = """%%% This file was auto-generated by make_std.py
%%% Please DO NOT modify this file directly.  Instead, change make_std.py or std_funcs.dij.
%%% Created by Jared Jonas
@__builtin

%%% Numerical constants
0 -
1 /
n1 0 1 -

% Positive numbers from 2-100
"""

sec_neg = """

% Negative numbers from -2 to -10
"""

sec_pow = """

% Powers of 10 from 1,000 to 1,000,000,000
"""

sec_ascii = """

%%% ASCII characters 
"""

sec_args = """

% Arguments
"""

sec_exports = """

%%% Export all variables
"""

sec_end = """

%%% End of auto-generated section
"""


if __name__ == '__main__':
    # Generate ASCII names, starting with symbols
    ascii_dict = {'minus_sign': 45, 'hyphen': 45, 'period': 46, 'slash': 47, 'less_than': 60, 'greater_than': 62,
                  'at_sign': 64, 'left_bracket': 91, 'backslash': 92, 'right_bracket': 93,
                  'carat': 94, 'underscore': 95, 'grave': 96, 'newline': 10, 'tab': 11}
    ascii_dict_vals = list(ascii_dict.values())

    # Add remaining ascii characters
    for i in range(32, 127):
        if i not in ascii_dict_vals:
            # Clean ascii name (lowercase, spaces to underscores, lowercase -> l, uppercase -> u, digit -> d)
            ascii_name = name(chr(i)).lower().replace(' ', '_')
            ascii_name = ascii_name.replace('latin_capital_letter_', 'u').replace('latin_small_letter_', 'l')
            if ascii_name.startswith('digit_'):
                ascii_name = 'd' + str(i-48)
            ascii_dict[ascii_name] = i

    # Begin contents
    exports = ['0', '1', 'n1']
    contents = sec_begin

    # Generate all positive numbers from 0 to 100
    numbers = []
    for i in range(2, 101):
        numbers.append(f"{i} {i-1} n1-")
        exports.append(str(i))
    contents += '~'.join(numbers)

    # Negative numbers
    numbers = []
    contents += sec_neg
    for i in range(2, 11):
        numbers.append(f"n{i} n{i-1} 1-")
        exports.append(f'n{i}')
    contents += '~'.join(numbers)

    # Powers of 10
    numbers = []
    contents += sec_pow
    for i in range(3, 10):
        numbers.append(f"{10**i:,} {10**(i-1):,} 1 10//".replace(',', '_'))
        exports.append(f"{10**i:,}".replace(',', '_'))
    contents += '~'.join(numbers)

    # ASCII
    ascii_list = []
    contents += sec_ascii
    for (k, v) in ascii_dict.items():
        if v <= 100:
            ascii_list.append(f'{k} {v}')
        else:  # Only numbers <= 100 have variable entries
            ascii_list.append(f'{k} 100 0 {v%100}--')
        exports.append(k)
    contents += '~'.join(ascii_list)

    # Args
    args = []
    for i in range(0, 10):
        args.append(f"arg{i}-")
        exports.append(f"arg{i}")
    contents += sec_args + '~'.join(args)

    # Add exports and ending section
    contents += sec_exports
    contents += '~'.join([f"export {x}&&" for x in exports])
    contents += sec_end

    # Now read std_func.dij, which is the handwritten portion, and append it
    with open("std_funcs.dij", 'rt') as f:
        contents += f.read()

    # Save contents to file
    with open('../std.dij', 'wt') as f:
        f.write(contents)

    # Optionally copy file to the source folder
    if len(sys.argv) > 1 and sys.argv[1].lower() == 'copy':
        from shutil import copyfile
        copyfile('../std.dij', '../../dijon/std.dij')
