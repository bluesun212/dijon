%%% This file was auto-generated by make_std.py
%%% Please DO NOT modify this file directly.  Instead, change make_std.py or std_funcs.dij.
%%% Created by Jared Jonas
@__builtin

%%% Numerical constants
0 -
1 /
n1 0 1 -

% Positive numbers from 2-100
2 1 n1-~3 2 n1-~4 3 n1-~5 4 n1-~6 5 n1-~7 6 n1-~8 7 n1-~9 8 n1-~10 9 n1-~11 10 n1-~12 11 n1-~13 12 n1-~14 13 n1-~15 14 n1-~16 15 n1-~17 16 n1-~18 17 n1-~19 18 n1-~20 19 n1-~21 20 n1-~22 21 n1-~23 22 n1-~24 23 n1-~25 24 n1-~26 25 n1-~27 26 n1-~28 27 n1-~29 28 n1-~30 29 n1-~31 30 n1-~32 31 n1-~33 32 n1-~34 33 n1-~35 34 n1-~36 35 n1-~37 36 n1-~38 37 n1-~39 38 n1-~40 39 n1-~41 40 n1-~42 41 n1-~43 42 n1-~44 43 n1-~45 44 n1-~46 45 n1-~47 46 n1-~48 47 n1-~49 48 n1-~50 49 n1-~51 50 n1-~52 51 n1-~53 52 n1-~54 53 n1-~55 54 n1-~56 55 n1-~57 56 n1-~58 57 n1-~59 58 n1-~60 59 n1-~61 60 n1-~62 61 n1-~63 62 n1-~64 63 n1-~65 64 n1-~66 65 n1-~67 66 n1-~68 67 n1-~69 68 n1-~70 69 n1-~71 70 n1-~72 71 n1-~73 72 n1-~74 73 n1-~75 74 n1-~76 75 n1-~77 76 n1-~78 77 n1-~79 78 n1-~80 79 n1-~81 80 n1-~82 81 n1-~83 82 n1-~84 83 n1-~85 84 n1-~86 85 n1-~87 86 n1-~88 87 n1-~89 88 n1-~90 89 n1-~91 90 n1-~92 91 n1-~93 92 n1-~94 93 n1-~95 94 n1-~96 95 n1-~97 96 n1-~98 97 n1-~99 98 n1-~100 99 n1-

% Negative numbers from -2 to -10
n2 n1 1-~n3 n2 1-~n4 n3 1-~n5 n4 1-~n6 n5 1-~n7 n6 1-~n8 n7 1-~n9 n8 1-~n10 n9 1-

% Powers of 10 from 1,000 to 1,000,000,000
1_000 100 1 10//~10_000 1_000 1 10//~100_000 10_000 1 10//~1_000_000 100_000 1 10//~10_000_000 1_000_000 1 10//~100_000_000 10_000_000 1 10//~1_000_000_000 100_000_000 1 10//

%%% ASCII characters 
minus_sign 45~hyphen 45~period 46~slash 47~less_than 60~greater_than 62~at_sign 64~left_bracket 91~backslash 92~right_bracket 93~carat 94~underscore 95~grave 96~newline 10~tab 11~space 32~exclamation_mark 33~quotation_mark 34~number_sign 35~dollar_sign 36~percent_sign 37~ampersand 38~apostrophe 39~left_parenthesis 40~right_parenthesis 41~asterisk 42~plus_sign 43~comma 44~d0 48~d1 49~d2 50~d3 51~d4 52~d5 53~d6 54~d7 55~d8 56~d9 57~colon 58~semicolon 59~equals_sign 61~question_mark 63~ua 65~ub 66~uc 67~ud 68~ue 69~uf 70~ug 71~uh 72~ui 73~uj 74~uk 75~ul 76~um 77~un 78~uo 79~up 80~uq 81~ur 82~us 83~ut 84~uu 85~uv 86~uw 87~ux 88~uy 89~uz 90~la 97~lb 98~lc 99~ld 100~le 100 0 1--~lf 100 0 2--~lg 100 0 3--~lh 100 0 4--~li 100 0 5--~lj 100 0 6--~lk 100 0 7--~ll 100 0 8--~lm 100 0 9--~ln 100 0 10--~lo 100 0 11--~lp 100 0 12--~lq 100 0 13--~lr 100 0 14--~ls 100 0 15--~lt 100 0 16--~lu 100 0 17--~lv 100 0 18--~lw 100 0 19--~lx 100 0 20--~ly 100 0 21--~lz 100 0 22--~left_curly_bracket 100 0 23--~vertical_line 100 0 24--~right_curly_bracket 100 0 25--~tilde 100 0 26--

% Arguments
arg0-~arg1-~arg2-~arg3-~arg4-~arg5-~arg6-~arg7-~arg8-~arg9-

%%% Export all variables
export 0&&~export 1&&~export n1&&~export 2&&~export 3&&~export 4&&~export 5&&~export 6&&~export 7&&~export 8&&~export 9&&~export 10&&~export 11&&~export 12&&~export 13&&~export 14&&~export 15&&~export 16&&~export 17&&~export 18&&~export 19&&~export 20&&~export 21&&~export 22&&~export 23&&~export 24&&~export 25&&~export 26&&~export 27&&~export 28&&~export 29&&~export 30&&~export 31&&~export 32&&~export 33&&~export 34&&~export 35&&~export 36&&~export 37&&~export 38&&~export 39&&~export 40&&~export 41&&~export 42&&~export 43&&~export 44&&~export 45&&~export 46&&~export 47&&~export 48&&~export 49&&~export 50&&~export 51&&~export 52&&~export 53&&~export 54&&~export 55&&~export 56&&~export 57&&~export 58&&~export 59&&~export 60&&~export 61&&~export 62&&~export 63&&~export 64&&~export 65&&~export 66&&~export 67&&~export 68&&~export 69&&~export 70&&~export 71&&~export 72&&~export 73&&~export 74&&~export 75&&~export 76&&~export 77&&~export 78&&~export 79&&~export 80&&~export 81&&~export 82&&~export 83&&~export 84&&~export 85&&~export 86&&~export 87&&~export 88&&~export 89&&~export 90&&~export 91&&~export 92&&~export 93&&~export 94&&~export 95&&~export 96&&~export 97&&~export 98&&~export 99&&~export 100&&~export n2&&~export n3&&~export n4&&~export n5&&~export n6&&~export n7&&~export n8&&~export n9&&~export n10&&~export 1_000&&~export 10_000&&~export 100_000&&~export 1_000_000&&~export 10_000_000&&~export 100_000_000&&~export 1_000_000_000&&~export minus_sign&&~export hyphen&&~export period&&~export slash&&~export less_than&&~export greater_than&&~export at_sign&&~export left_bracket&&~export backslash&&~export right_bracket&&~export carat&&~export underscore&&~export grave&&~export newline&&~export tab&&~export space&&~export exclamation_mark&&~export quotation_mark&&~export number_sign&&~export dollar_sign&&~export percent_sign&&~export ampersand&&~export apostrophe&&~export left_parenthesis&&~export right_parenthesis&&~export asterisk&&~export plus_sign&&~export comma&&~export d0&&~export d1&&~export d2&&~export d3&&~export d4&&~export d5&&~export d6&&~export d7&&~export d8&&~export d9&&~export colon&&~export semicolon&&~export equals_sign&&~export question_mark&&~export ua&&~export ub&&~export uc&&~export ud&&~export ue&&~export uf&&~export ug&&~export uh&&~export ui&&~export uj&&~export uk&&~export ul&&~export um&&~export un&&~export uo&&~export up&&~export uq&&~export ur&&~export us&&~export ut&&~export uu&&~export uv&&~export uw&&~export ux&&~export uy&&~export uz&&~export la&&~export lb&&~export lc&&~export ld&&~export le&&~export lf&&~export lg&&~export lh&&~export li&&~export lj&&~export lk&&~export ll&&~export lm&&~export ln&&~export lo&&~export lp&&~export lq&&~export lr&&~export ls&&~export lt&&~export lu&&~export lv&&~export lw&&~export lx&&~export ly&&~export lz&&~export left_curly_bracket&&~export vertical_line&&~export right_curly_bracket&&~export tilde&&~export arg0&&~export arg1&&~export arg2&&~export arg3&&~export arg4&&~export arg5&&~export arg6&&~export arg7&&~export arg8&&~export arg9&&

%%% End of auto-generated section
%%% Beginning of handwritten section

std_version 1

%%% Random functions
none - &&
none$__is_none# /

:is_none arg0 arg0$__is_none# ~ is_none bool;  % FIXME

:bool
    flag /
    :flag.0 flag -;
    flag arg0 $# ~ bool flag
;

:if arg1$bool$#;

:for_range
    :for.2
        :flag.0 flag /;
        flag -
        flag end i - $#
        for flag $#
    ;

    :for.0
        arg0 i
        func $
        i i n1 -
        for.2
    ;

    start arg0 ~ end arg1 ~ func arg2
    i start
    for.2
    arg0 start
;

export std_version &&
export none &&
export is_none &&
export bool &&
export if &&
export for_range &&



%%% Array functions
% TODO: push, pop, insert, remove, indexof, reverse, filter, map, reduce
:arrnew arrnew - && ~ arrnew$__length# arg0;
:arrlen arrlen arg0$__length#;

:arrext
    a arg0 ~ b arg1 ~ x arg2
    a_len a$__length# ~ b_len b$__length#
    a$__length# a_len 0 b_len --

    :internal i a_len 0 arg0-- ~ a$i$# b$arg0$#;
    arg0 0 ~ arg1 b_len ~ arg2 internal && ~ for_range
    arg0 a ~ arg1 b ~ arg2 x
;

:arrcat
    a arg0 ~ b arg1
    arg0 0 ~ arrcat arrnew
    arg0 arrcat ~ arg1 a ~ arrext
    arg0 arrcat ~ arg1 b ~ arrext
    arg0 a ~ arg1 b
;

:arrcpy
    old arg0
    arg0 0 ~ arrcpy arrnew
    arg0 arrcpy ~ arg1 old ~ arrext
    arg0 old
;

export arrnew &&
export arrlen &&
export arrext &&
export arrcat &&
export arrcpy &&



%%% String functions
% TODO: strstr, strind, strcmp
% trim, toupper, tolower, startswith, endswith, replace, lastindexof,
:strnew x arg0 ~ arg0 0 ~ strnew arrnew ~ arg0 x;
:strout
    :internal out str$arg0$#;
    str arg0 ~ x arg1 ~ y arg2
    arg0 0 ~ arg1 str$__length# ~ arg2 internal && ~ for_range
    arg0 str ~ arg1 x ~ arg2 y
;

:strcat arrcat;
:strcpy arrcpy;
:chr chr strnew ~ chr$__length# 1 ~ chr$0# arg0;
:sb sb$sb$__length#$# arg0 ~ sb$__length# sb$__length# n1 -;
:sb_clear sb strnew;
sb_clear

export strnew &&
export strout &&
export strcat &&
export strcpy &&
export chr &&
export sb &&
export sb_clear &&



%%% Math functions
:safe_invert.0  % TODO REMOVE
    :inv.0 safe_invert.0 0;
    :inv.1 safe_invert.0 1 arg0 /;
    inv bool $#
;

:safe_multiply
    :flag.0 flag/;
    :mult.0 safe_multiply arg0 1 arg1 / /;
    :mult.1 safe_multiply 0;
    flag -
    flag arg0 $#
    flag arg1 $#
    mult flag $#
;

:denominator __builtin.den arg0 ~ denominator __builtin.den;
:frac_part __builtin.frac arg0 ~ frac_part __builtin.frac;
:sign       % TODO Replace safe_invert with safe_multiply
    x arg0
    den denominator
    arg0 arg0 1 den //
    arg0 safe_invert.0
    den denominator
    sign arg0 1 den //
    arg0 x
;
:cmp x arg0 ~ arg0 arg0 arg1 - ~ cmp sign ~ arg0 x;
:abs y arg1 ~ arg1 sign ~ abs safe_multiply ~ arg1 y;
:is_int x arg0 ~ arg0 frac_part ~ is_int 1 bool - ~ arg0 x;

:floor
    :floor.0 arg0 x ~ floor x frac_part -;
    :floor.1 floor x;
    x arg0 ~ arg0 is_int ~ floor bool $# ~ arg0 x
;

:ceil
    :ceil.0 arg0 x n1 - ~ ceil floor;
    :ceil.1 ceil x;
    x arg0 ~ arg0 is_int ~ ceil bool &# ~ arg0 x
;

:round x arg0 ~ arg0 x n1 2 / - ~ round floor ~ arg0 x;  % TODO: Behavior not quite right

:mod
    x arg0
    arg0 x arg1 /
    arg0 floor ~ mod x safe_multiply -
    arg0 x
;

:min ;  % TODO
:max ;

export safe_multiply &&
export denominator &&
export frac_part &&
export sign &&
export cmp &&
export abs &&
export is_int &&
export floor &&
export ceil &&
export round &&
export mod &&
export min &&
export max &&